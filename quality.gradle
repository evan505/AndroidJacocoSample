apply plugin: 'jacoco'

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*'
]
def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java"


tasks.register('customJacocoTestReport', JacocoReport) {
    dependsOn 'test'

    reports {
        html.getRequired().set(true)
        html.getOutputLocation().set(file("${buildDir}/reports/jacoco"))
        csv.getRequired().set(true)
        csv.getOutputLocation().set(file("${buildDir}/reports/jacoco/report.csv"))
    }

    sourceDirectories.setFrom([mainSrc])
    classDirectories.setFrom([debugTree])
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

tasks.register('customJacocoTestCoverageVerification', JacocoCoverageVerification) {
    dependsOn 'customJacocoTestReport'

    sourceDirectories.setFrom([mainSrc])
    classDirectories.setFrom([debugTree])
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
    ]))


    violationRules {
        setFailOnViolation(true)

        rule {
            element = 'PACKAGE'

            limit {
                value = 'COVEREDRATIO'
                counter = 'BRANCH'
                minimum = 0.5
            }
        }

        rule {
            element = 'PACKAGE'

            limit {
                value = 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                minimum = 0.8
            }
        }

        rule {
            element = 'PACKAGE'
            includes = ['com.androidjacoco.sample.*.presenter']
            enabled = true

            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
    }
}